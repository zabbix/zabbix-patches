Last-Update: 2015-09-18
Forwarded: not-needed
Author:  Dmitry Verhoturov <paskal.07@gmail.com>
Description: Adds ability for zabbix-sender send values to two servers at same time

--- a/src/zabbix_sender/zabbix_sender.c
+++ b/src/zabbix_sender/zabbix_sender.c
@@ -29,14 +29,16 @@
 const char	*progname = NULL;
 const char	title_message[] = "Zabbix Sender";
 const char	syslog_app_name[] = "zabbix_sender";
-const char	usage_message[] = "[-Vhv] {[-zpsI] -ko | [-zpI] -T -i <file> -r} [-c <file>]";
+const char	usage_message[] = "[-Vhv] {[-znplsI] -ko | [-zpI] -T -i <file> -r} [-c <file>]";
 
 const char	*help_message[] = {
 	"Options:",
 	"  -c --config <file>                   Absolute path to the configuration file",
 	"",
 	"  -z --zabbix-server <server>          Hostname or IP address of Zabbix server",
+	"  -n --secondary-server <server>       Hostname or IP address of secondary Zabbix server",
 	"  -p --port <server port>              Specify port number of server trapper running on the server. Default is " ZBX_DEFAULT_SERVER_PORT_STR,
+	"  -l --secondary-port <server port>    Specify port number of server trapper running on the secondary server. Default is " ZBX_DEFAULT_SERVER_PORT_STR,
 	"  -s --host <hostname>                 Specify host name. Host IP address and DNS name will not work",
 	"  -I --source-address <IP address>     Specify source IP address",
 	"",
@@ -67,7 +69,9 @@
 {
 	{"config",		1,	NULL,	'c'},
 	{"zabbix-server",	1,	NULL,	'z'},
+	{"secondary-server",	1,	NULL,	'n'},
 	{"port",		1,	NULL,	'p'},
+	{"secondary-port",	1,	NULL,	'l'},
 	{"host",		1,	NULL,	's'},
 	{"source-address",	1,	NULL,	'I'},
 	{"key",			1,	NULL,	'k'},
@@ -82,7 +86,7 @@
 };
 
 /* short options */
-static char	shortopts[] = "c:I:z:p:s:k:o:Ti:rvhV";
+static char	shortopts[] = "c:I:z:n:p:l:s:k:o:Ti:rvhV";
 
 /* end of COMMAND LINE OPTIONS */
 
@@ -94,7 +98,9 @@
 
 static char	*CONFIG_SOURCE_IP = NULL;
 static char	*ZABBIX_SERVER = NULL;
+static char	*SECONDARY_SERVER = NULL;
 unsigned short	ZABBIX_SERVER_PORT = 0;
+unsigned short	SECONDARY_SERVER_PORT = 0;
 static char	*ZABBIX_HOSTNAME = NULL;
 static char	*ZABBIX_KEY = NULL;
 static char	*ZABBIX_KEY_VALUE = NULL;
@@ -114,7 +120,9 @@
 {
 	char		*source_ip;
 	char		*server;
+	char		*secondary_server;
 	unsigned short	port;
+	unsigned short	secondary_port;
 	struct zbx_json	json;
 	int		sync_timestamp;
 }
@@ -340,6 +348,26 @@
 	if (FAIL == tcp_ret)
 		zabbix_log(LOG_LEVEL_DEBUG, "send value error: %s", zbx_tcp_strerror());
 
+	if (sentdval_args->secondary_server != NULL)
+	{
+		if (SUCCEED == (tcp_ret = zbx_tcp_connect(&sock, CONFIG_SOURCE_IP, sentdval_args->secondary_server, sentdval_args->secondary_port, GET_SENDER_TIMEOUT)))
+		{
+			if (SUCCEED == (tcp_ret = zbx_tcp_send(&sock, sentdval_args->json.buffer)))
+			{
+				if (SUCCEED == (tcp_ret = zbx_tcp_recv(&sock)))
+				{
+					zabbix_log(LOG_LEVEL_DEBUG, "answer [%s]", sock.buffer);
+					if (NULL == sock.buffer || FAIL == (ret = check_response(sock.buffer)))
+						zabbix_log(LOG_LEVEL_WARNING, "incorrect answer from secondary server [%s]", sock.buffer);
+				}
+			}
+
+			zbx_tcp_close(&sock);
+		}
+		if (FAIL == tcp_ret)
+			zabbix_log(LOG_LEVEL_DEBUG, "send value to secondary error: %s", zbx_tcp_strerror());
+	}
+
 	zbx_thread_exit(ret);
 }
 
@@ -379,9 +407,23 @@
 			if (NULL != cfg_active_hosts && '\0' != *cfg_active_hosts)
 			{
 				unsigned short	cfg_server_port = 0;
+				unsigned short  cfg_secondary_port = 0;
+				char *r2;
 
-				if (NULL != (r = strchr(cfg_active_hosts, ',')))
+				if (NULL != (r = strchr(cfg_active_hosts, ','))) {
 					*r = '\0';
+					r2 = strchr(r+1, ',');
+					if (r2 != NULL)
+						*r2 = '\0';
+					if (SUCCEED != parse_serveractive_element(r+1, &SECONDARY_SERVER, &cfg_secondary_port, 0))
+					{
+							zbx_error("error parsing a \"ServerActive\" option: address \"%s\" is invalid",
+									r+1);
+							exit(EXIT_FAILURE);
+					}
+					if (0 == SECONDARY_SERVER_PORT && 0 != cfg_secondary_port)
+						SECONDARY_SERVER_PORT = cfg_secondary_port;
+				}
 
 				if (SUCCEED != parse_serveractive_element(cfg_active_hosts, &ZABBIX_SERVER,
 						&cfg_server_port, 0))
@@ -434,9 +476,15 @@
 			case 'z':
 				ZABBIX_SERVER = zbx_strdup(ZABBIX_SERVER, zbx_optarg);
 				break;
+			case 'n':
+				SECONDARY_SERVER = zbx_strdup(SECONDARY_SERVER, zbx_optarg);
+				break;
 			case 'p':
 				ZABBIX_SERVER_PORT = (unsigned short)atoi(zbx_optarg);
 				break;
+			case 'l':
+				SECONDARY_SERVER_PORT = (unsigned short)atoi(zbx_optarg);
+				break;
 			case 's':
 				ZABBIX_HOSTNAME = zbx_strdup(ZABBIX_HOSTNAME, zbx_optarg);
 				break;
@@ -505,6 +553,8 @@
 	}
 	if (0 == ZABBIX_SERVER_PORT)
 		ZABBIX_SERVER_PORT = ZBX_DEFAULT_SERVER_PORT;
+	if (0 == SECONDARY_SERVER_PORT)
+		SECONDARY_SERVER_PORT = ZBX_DEFAULT_SERVER_PORT;
 
 	if (MIN_ZABBIX_PORT > ZABBIX_SERVER_PORT)
 	{
@@ -513,11 +563,20 @@
 		goto exit;
 	}
 
+	if (MIN_ZABBIX_PORT > SECONDARY_SERVER_PORT)
+	{
+		zabbix_log(LOG_LEVEL_WARNING, "Incorrect port number [%d]. Allowed [%d:%d]",
+				(int)SECONDARY_SERVER_PORT, (int)MIN_ZABBIX_PORT, (int)MAX_ZABBIX_PORT);
+		goto exit;
+	}
+
 	thread_args.server_num = 0;
 	thread_args.args = &sentdval_args;
 
 	sentdval_args.server = ZABBIX_SERVER;
 	sentdval_args.port = ZABBIX_SERVER_PORT;
+	sentdval_args.secondary_server = SECONDARY_SERVER;
+	sentdval_args.secondary_port = SECONDARY_SERVER_PORT;
 
 	zbx_json_init(&sentdval_args.json, ZBX_JSON_STAT_BUF_LEN);
 	zbx_json_addstring(&sentdval_args.json, ZBX_PROTO_TAG_REQUEST, ZBX_PROTO_VALUE_SENDER_DATA, ZBX_JSON_TYPE_STRING);
Only in b/src/zabbix_sender: zabbix_sender.c.orig
